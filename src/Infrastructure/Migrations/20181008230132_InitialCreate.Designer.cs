// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(GithubTopperContext))]
    [Migration("20181008230132_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ApplicationCore.Entities.Owner", b =>
                {
                    b.Property<long>("Id");

                    b.Property<string>("AvatarUrl");

                    b.Property<string>("Bio");

                    b.Property<string>("Blog");

                    b.Property<int?>("Collaborators");

                    b.Property<string>("Company");

                    b.Property<string>("Email");

                    b.Property<int>("Followers");

                    b.Property<int>("Following");

                    b.Property<bool?>("Hireable");

                    b.Property<string>("HtmlUrl");

                    b.Property<string>("Location");

                    b.Property<string>("Login");

                    b.Property<string>("Name");

                    b.Property<string>("NodeId");

                    b.Property<int>("PublicGists");

                    b.Property<int>("PublicRepos");

                    b.HasKey("Id");

                    b.ToTable("Owner");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Repositories", b =>
                {
                    b.Property<long>("Id");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<string>("DefaultBranch");

                    b.Property<string>("Description");

                    b.Property<int>("ForksCount");

                    b.Property<string>("FullName");

                    b.Property<string>("GitUrl");

                    b.Property<string>("HtmlUrl");

                    b.Property<bool>("IsPrivate");

                    b.Property<string>("Language");

                    b.Property<string>("LicenseName");

                    b.Property<string>("Name");

                    b.Property<string>("NodeId");

                    b.Property<int>("OpenIssuesCount");

                    b.Property<long>("OwnerId");

                    b.Property<int>("StargazersCount");

                    b.Property<DateTimeOffset>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Repositories");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Repositories", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Owner", "Owner")
                        .WithMany("Repositories")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
